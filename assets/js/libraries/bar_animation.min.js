const ease = {
  exponentialIn: (t) => (0 == t ? t : Math.pow(2, 10 * (t - 1))),
  exponentialOut: (t) => (1 == t ? t : 1 - Math.pow(2, -10 * t)),
  exponentialInOut: (t) =>
    0 == t || 1 == t
      ? t
      : t < 0.5
      ? 0.5 * Math.pow(2, 20 * t - 10)
      : -0.5 * Math.pow(2, 10 - 20 * t) + 1,
  sineOut: (t) => Math.sin(1.5707963267948966 * t),
  circularInOut: (t) =>
    t < 0.5
      ? 0.5 * (1 - Math.sqrt(1 - 4 * t * t))
      : 0.5 * (Math.sqrt((3 - 2 * t) * (2 * t - 1)) + 1),
  cubicIn: (t) => t * t * t,
  cubicOut: (t) => {
    const e = t - 1;
    return e * e * e + 1;
  },
  cubicInOut: (t) =>
    t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1,
  quadraticOut: (t) => -t * (t - 2),
  quarticOut: (t) => Math.pow(t - 1, 3) * (1 - t) + 1,
};
class ShapeOverlays {
  constructor(t) {
    (this.elm = t),
      (this.path = t.querySelectorAll("path")),
      (this.numPoints = 18),
      (this.duration = 600),
      (this.delayPointsArray = []),
      (this.delayPointsMax = 300),
      (this.delayPerPath = 100),
      (this.timeStart = Date.now()),
      (this.isOpened = !1),
      (this.isAnimating = !1);
  }
  toggle() {
    this.isAnimating = !0;
    const t = 4 * Math.random() + 6;
    for (var e = 0; e < this.numPoints; e++) {
      const i = (e / (this.numPoints - 1)) * Math.PI;
      this.delayPointsArray[e] =
        ((Math.sin(-i) + Math.sin(-i * t) + 2) / 4) * this.delayPointsMax;
    }
    !1 === this.isOpened ? this.open() : this.close();
  }
  open() {
    (this.isOpened = !0),
      this.elm.classList.add("is-opened"),
      (this.timeStart = Date.now()),
      this.renderLoop();
  }
  close() {
    (this.isOpened = !1),
      this.elm.classList.remove("is-opened"),
      (this.timeStart = Date.now()),
      this.renderLoop();
  }
  updatePath(t) {
    const e = [];
    for (var i = 0; i < this.numPoints + 1; i++)
      e[i] =
        100 *
        ease.cubicInOut(
          Math.min(Math.max(t - this.delayPointsArray[i], 0) / this.duration, 1)
        );
    let s = "";
    s += this.isOpened ? `M 0 0 V ${e[0]} ` : `M 0 ${e[0]} `;
    for (i = 0; i < this.numPoints - 1; i++) {
      const t = ((i + 1) / (this.numPoints - 1)) * 100,
        a = t - ((1 / (this.numPoints - 1)) * 100) / 2;
      s += `C ${a} ${e[i]} ${a} ${e[i + 1]} ${t} ${e[i + 1]} `;
    }
    return (s += this.isOpened ? "V 0 H 0" : "V 100 H 0"), s;
  }
  render() {
    if (this.isOpened)
      for (var t = 0; t < this.path.length; t++)
        this.path[t].setAttribute(
          "d",
          this.updatePath(Date.now() - (this.timeStart + this.delayPerPath * t))
        );
    else
      for (t = 0; t < this.path.length; t++)
        this.path[t].setAttribute(
          "d",
          this.updatePath(
            Date.now() -
              (this.timeStart + this.delayPerPath * (this.path.length - t - 1))
          )
        );
  }
  renderLoop() {
    this.render(),
      Date.now() - this.timeStart <
      this.duration +
        this.delayPerPath * (this.path.length - 1) +
        this.delayPointsMax
        ? requestAnimationFrame(() => {
            this.renderLoop();
          })
        : (this.isAnimating = !1);
  }
}
!(function () {
  const t = document.querySelector(".bar_burger"),
    e = document.querySelectorAll("#nav-table"),
    i = document.querySelector(".shape-overlays"),
    s = new ShapeOverlays(i);
  t.addEventListener("click", () => {
    if (s.isAnimating) return !1;
    if ((s.toggle(), !0 === s.isOpened)) {
      t.classList.add("is-opened-navi");
      for (var i = 0; i < e.length; i++) e[i].classList.add("is-opened");
    } else {
      t.classList.remove("is-opened-navi");
      for (i = 0; i < e.length; i++) e[i].classList.remove("is-opened");
    }
  });
})();
